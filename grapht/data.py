# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05_data.ipynb (unless otherwise specified).

__all__ = ['get_benchmark', 'get_planar_graph', 'get_sensor_graph']

# Cell
from nbdev.showdoc import *
import numpy as np
import networkx as nx
import scipy
import pygsp
from pathlib import Path

# Cell
def get_benchmark(dataset):
    """Returns an adjacency matrix `A`, feature matrix `X` and labels `y` from standard benchmark.

    The data is normalised as done in `https://github.com/shchur/gnn-benchmark`.

    Args:
        `dataset` (string): Can be cora, pubmed, citeseer, amazon_electronics_photo,
                            amazon_electronics_computers, ms_academic_phy or ms_academic_cs

    Returns:
        `A`: An adjacency matrix in sparse array format
        `X`: A feature matrix in sparse array format
        `y`: Labels in list format
    """
    fname = Path(__file__).parents[1].joinpath(f'data/standardised_{dataset}.npz')
    data = np.load(fname, allow_pickle=True)
    A, X, y = data['A'].tolist(), data['X'].tolist(), data['y']
    return A, X, y

# Cell

def get_planar_graph(n, return_pos=False):
    """Returns a networkx graph which is planar on n nodes.

    The generation process is taken from:
    https://stackoverflow.com/questions/26681899/how-to-make-networkx-graph-from-delaunay-preserving-attributes-of-the-input-node

    If `return_pos` a planar embedding is also returned in the form of {node : (x, y)}
    """
    points = np.random.rand(n, 2)
    delTri = scipy.spatial.Delaunay(points)
    edges = set()
    for n in range(delTri.nsimplex):
        edge = sorted([delTri.vertices[n,0], delTri.vertices[n,1]])
        edges.add((edge[0], edge[1]))
        edge = sorted([delTri.vertices[n,0], delTri.vertices[n,2]])
        edges.add((edge[0], edge[1]))
        edge = sorted([delTri.vertices[n,1], delTri.vertices[n,2]])
        edges.add((edge[0], edge[1]))
    graph = nx.Graph(list(edges))

    if return_pos:
        pos = dict(zip(range(len(points)), points))
        return graph, pos
    else:
        return graph

def get_sensor_graph(n):
    """Returns a networkx graph for a connected KNN sensor graph

    This used the github pygsp.graphs.Sensor implementation, not the stable release (i.e. as described in the docs).
    """
    G = pygsp.graphs.Sensor(n)
    while not G.is_connected():
        G = pygsp.graphs.Sensor(n)
    return nx.Graph(G.W)